// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.232000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=210,HLS_SYN_LUT=230,HLS_VERSION=2020_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire  signed [31:0] shift_reg_q0;
wire   [4:0] fir_int_int_c_address0;
reg    fir_int_int_c_ce0;
wire   [31:0] fir_int_int_c_q0;
wire   [31:0] mul_fu_143_p2;
reg   [31:0] mul_reg_207;
wire   [0:0] tmp_fu_149_p3;
reg   [0:0] tmp_reg_212;
wire    ap_CS_fsm_state2;
wire   [63:0] i_cast1_fu_157_p1;
reg   [63:0] i_cast1_reg_216;
wire   [0:0] icmp_ln16_fu_166_p2;
reg   [0:0] icmp_ln16_reg_221;
wire   [5:0] add_ln12_fu_190_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] acc_1_fu_196_p2;
reg   [5:0] i_reg_109;
reg   [31:0] acc_reg_121;
reg   [31:0] ap_phi_mux_mul_pn_phi_fu_137_p4;
reg   [31:0] mul_pn_reg_134;
wire   [31:0] mul_ln22_fu_183_p2;
wire   [63:0] zext_ln21_fu_178_p1;
wire    ap_CS_fsm_state4;
wire   [6:0] mul_fu_143_p1;
wire   [4:0] empty_5_fu_162_p1;
wire   [4:0] add_ln21_fu_172_p2;
wire  signed [10:0] mul_ln22_fu_183_p0;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_fir_int_int_c #(
    .DataWidth( 32 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
fir_int_int_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir_int_int_c_address0),
    .ce0(fir_int_int_c_ce0),
    .q0(fir_int_int_c_q0)
);

fir_mul_32s_7ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mul_32s_7ns_32_1_1_U1(
    .din0(x),
    .din1(mul_fu_143_p1),
    .dout(mul_fu_143_p2)
);

fir_mul_11s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_11s_32s_32_1_1_U2(
    .din0(mul_ln22_fu_183_p0),
    .din1(shift_reg_q0),
    .dout(mul_ln22_fu_183_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_reg_121 <= acc_1_fu_196_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_reg_121 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_109 <= add_ln12_fu_190_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_109 <= 6'd18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_221 == 1'd0) & (tmp_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_pn_reg_134 <= mul_ln22_fu_183_p2;
    end else if (((icmp_ln16_fu_166_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_pn_reg_134 <= mul_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_cast1_reg_216[5 : 0] <= i_cast1_fu_157_p1[5 : 0];
        icmp_ln16_reg_221 <= icmp_ln16_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_reg_207 <= mul_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_212 <= i_reg_109[32'd5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_221 == 1'd0) & (tmp_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_mul_pn_phi_fu_137_p4 = mul_ln22_fu_183_p2;
    end else begin
        ap_phi_mux_mul_pn_phi_fu_137_p4 = mul_pn_reg_134;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fir_int_int_c_ce0 = 1'b1;
    end else begin
        fir_int_int_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = i_cast1_reg_216;
    end else if (((icmp_ln16_fu_166_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 5'd0;
    end else if (((icmp_ln16_fu_166_p2 == 1'd0) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln21_fu_178_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln16_fu_166_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln16_fu_166_p2 == 1'd0) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((icmp_ln16_fu_166_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln16_reg_221 == 1'd0) & (tmp_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln16_fu_166_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_196_p2 = (ap_phi_mux_mul_pn_phi_fu_137_p4 + acc_reg_121);

assign add_ln12_fu_190_p2 = ($signed(i_reg_109) + $signed(6'd63));

assign add_ln21_fu_172_p2 = ($signed(empty_5_fu_162_p1) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign empty_5_fu_162_p1 = i_reg_109[4:0];

assign fir_int_int_c_address0 = i_cast1_fu_157_p1;

assign i_cast1_fu_157_p1 = i_reg_109;

assign icmp_ln16_fu_166_p2 = ((i_reg_109 == 6'd0) ? 1'b1 : 1'b0);

assign mul_fu_143_p1 = 32'd53;

assign mul_ln22_fu_183_p0 = fir_int_int_c_q0;

assign tmp_fu_149_p3 = i_reg_109[32'd5];

assign y = acc_reg_121;

assign zext_ln21_fu_178_p1 = add_ln21_fu_172_p2;

always @ (posedge ap_clk) begin
    i_cast1_reg_216[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
